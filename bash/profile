#!/usr/bin/env bash
set -uo pipefail

# -- docs -------------------------------------------------------
# ~/.profile: executed by the command interpreter for login shells.
# This file is not read by bash(1), if ~/.bash_profile or ~/.bash_login exists.
# see /usr/share/doc/bash/examples/startup-files for examples.

if [ -f ~/.bashrc ]; then
  source ~/.bashrc
fi

# -- path, command prompt ---------------------------------------
export PATH='/usr/local/bin:/usr/local/sbin:/usr/bin:/bin:/usr/sbin:/sbin:~/bin'

# -- helpful functions ------------------------------------------
source_if_exists() {
  set +u
  [[ -f $1 ]] && source $1
  set -u
}

set -u
start_docker() {
  if [[ $(docker-machine ls | grep "default" | grep -c "Running") -eq 1 ]]; then
    eval "$(docker-machine env default)"
  else
    docker-machine start
    eval "$(docker-machine env default)"
  fi
}

# -- environment vars & dotfiles --------------------------------
export EDITOR=vim
export LESS='-i-P%f (%i/%m) Line %lt/%L'
source_if_exists "$HOME/.aliases"       # Aliases

# -- Bash bindings / settings ----------------------------------
bind 'set show-all-if-ambiguous on'
bind 'TAB:menu-complete'
bind 'set completion-ignore-case on'
bind 'set visible-stats on'
bind 'set page-completions off'

# -- OS  settings -----------------------------------------------
all_os() {
  source_if_exists "$HOME/.profilelocal"  # env variables
}

osx() {
  # -- fns ------------------------------------------------------
  start_docker

  # -- alias ----------------------------------------------------
  ## - docker --------
  alias "ssh.docker"="echo 'password is \`tcuser\`'; ssh docker@$(docker-machine ip default)"
  alias "docker.ssh"="docker-machine ssh default"
  alias "docker.ls"="docker ps -a --format='table {{.ID}}\t{{.Image}}'"

  alias "docker.psql.get"="docker run --name postgres -p 5432:5432 --detach kiasaki/alpine-postgres:9.5"
  alias "docker.psql.start"="docker start postgres"
  alias "docker.psql.stop"="docker stop postgres"

  alias "docker.rm-container"="docker ps -qa | xargs docker rm"
  alias "docker.rmi"="function _(){ docker images | awk '{print \$3}' | grep -v IMAGE | xargs docker rmi --force;};_"
  set +u
  alias "docker.rm.this"="function _(){ docker images | grep \"$1\" | awk '{print \$3}' | grep -v IMAGE | xargs docker rmi; };_"
  set -u
  ## - clojure -------
  alias llein='LEIN_FAST_TRAMPOLINE=true lein trampoline'
  alias tramp='LEIN_FAST_TRAMPOLINE=true lein trampoline'

  # -- env vars -------------------------------------------------
  export EVENT_NOKQUEUE=1                 # tmux kqueue error
  export WORKON_HOME=$HOME/.virtualenvs
  export PROJECT_HOME=$HOME/dev
  export VIRTUALENVWRAPPER_PYTHON=/usr/local/bin/python2
  export VIRTUALENVWRAPPER_VIRTUALENV=/usr/local/bin/virtualenv
  export VIRTUALENVWRAPPER_VIRTUALENV_ARGS='--no-site-packages'
  export GPG_TTY=$(tty)       # https://stackoverflow.com/questions/39494631/gpg-failed-to-sign-the-data-fatal-failed-to-write-commit-object-git-2-10-0

  # -- use ctrl + <Left> / <Right> ----------------------------
  bind '"\e[5C": forward-word'
  bind '"\e[5D": backward-word'
  bind '"\e[1;5C": forward-word'
  bind '"\e[1;5D": backward-word'

  # -- virtualenvwrapper --------------------------------------
  set +u
  source_if_exists /usr/local/bin/virtualenvwrapper.sh
  set -u

  # -- bash completion ----------------------------------------
  set +u
  if [ -f $(brew --prefix)/etc/bash_completion ]; then
    source $(brew --prefix)/etc/bash_completion   # bash-completion
  fi
  set -u

  # -- gpg ----------------------------------------------------
  #if [ -f ~/.gnupg/.gpg-agent-info ] && [ -n "$(pgrep gpg-agent)" ]; then
      #source ~/.gnupg/.gpg-agent-info
      #export GPG_AGENT_INFO
  #else
      #eval $(gpg-agent --daemon --write-env-file ~/.gnupg/.gpg-agent-info)
  #fi  # https://gist.github.com/bmhatfield/cc21ec0a3a2df963bffa3c1f884b676b
}

linux() {
  # -- linux-specific aliases ---------------------------------
  #alias pbcopy='xsel --clipboard --input'     ## Xsel and Xclip don't work in virtual terminal
  #alias pbpaste='xsel --clipboard --output'
  alias ll='ls -la'

  # -- virtual terminal (box connected to monitor) ------------
  #if [ "$TERM" = "linux" ]; then
    #echo -en "\e]P0222222" #black
    #echo -en "\e]P8222222" #darkgrey
    #echo -en "\e]P1803232" #darkred
    #echo -en "\e]P9982b2b" #red
    #echo -en "\e]P25b762f" #darkgreen
    #echo -en "\e]PA89b83f" #green
    #echo -en "\e]P3aa9943" #brown
    #echo -en "\e]PBefef60" #yellow
    #echo -en "\e]P4324c80" #darkblue
    #echo -en "\e]PC2b4f98" #blue
    #echo -en "\e]P5706c9a" #darkmagenta
    #echo -en "\e]PD826ab1" #magenta
    #echo -en "\e]P692b19e" #darkcyan
    #echo -en "\e]PEa1cdcd" #cyan
    #echo -en "\e]P7ffffff" #lightgrey
    #echo -en "\e]PFdedede" #white
    #clear #for background artifacting
  #fi
}

freebsd() {
  # -- original .profile ----------------------------------------
  # These are normally set through /etc/login.conf.  You may override them here
  # if wanted.
  # PATH=/sbin:/bin:/usr/sbin:/usr/bin:/usr/local/sbin:/usr/local/bin:$HOME/bin; export PATH
  # BLOCKSIZE=K;  export BLOCKSIZE

  # Setting TERM is normally done through /etc/ttys.  Do only override
  # if you're sure that you'll never log in via telnet or xterm or a
  # serial line.
  # TERM=xterm;   export TERM
  EDITOR=vi;      export EDITOR
  #PAGER=more;     export PAGER

  # set ENV to a file invoked each time sh is started for interactive use.
  #ENV=$HOME/.shrc; export ENV

  if [ -x /usr/bin/fortune ] ; then /usr/bin/fortune freebsd-tips ; fi

  # -- fns ------------------------------------------------------
  start_docker

  # -- bash completion ----------------------------------------
  set +u
  [[ $PS1 && -f /usr/local/share/bash-completion/bash_completion.sh ]] && \
    source /usr/local/share/bash-completion/bash_completion.sh
  set -u
}

os_specific() {
  all_os

  case $(uname) in
    ('Darwin') osx;;
    ('Linux') linux;;
    ('FreeBSD') freebsd;;
  esac
}
os_specific

# -- computer-specific stuffs -----------------------------------
work() {
  # -- files --------------------------------------------------
  source_if_exists "$HOME/.aws"           # AWS config
  source_if_exists "$HOME/.aliases-work"  # Aliases

  # Add password-protected id_rsa key
  #ssh-add ~/.ssh/id_rsa
}

skilbjo() {
  # Add password-protected id_rsa key
  if [[ $(ps aux | grep ssh-agent | wc -l) -lt 1 ]]; then
    eval "$(ssh-agent -s)" && \
      ssh-add -K ~/.ssh/id_rsa 2>/dev/null || \
      ssh-add ~/.ssh/id_rsa
  else
    ssh-add -K ~/.ssh/id_rsa 2>/dev/null || ssh-add ~/.ssh/id_rsa
  fi
}

_aws() {
  return
}

computer_specific() {
  case $(whoami) in
    ('john.skilbeck') work;;
    (skilbjo) skilbjo;;
    (pi) pi;;
    (ec2-user) _aws;;
  esac
}

computer_specific
set +u
