#!/usr/bin/env bash
set -euo pipefail
error_on_usage() {
    printf 'usage: %s app_name environment\n' "$(basename "$0")" >&2
    exit 1
}
error_on_missing_dependency() {
    printf 'ERROR: Need to install "%s"\n' "$1" >&2
    exit 1
}
error_on_required_arg() {
    printf 'ERROR: %s requires an argument\n' "$1" >&2
    exit 1
}
error_on_not_on_marathon() {
    printf 'ERROR: Could not find "%s" on marathon\n' "$1" >&2
    exit 1
}
syslog_tag=
user=
pem=
out_file=
latest_run=
while true
do
    case $1 in
        -t|--syslog-tag)
            if [[ -n $2 ]]
            then
                syslog_tag="$2"
                shift
            else
                error_on_required_arg --syslog-tag
            fi
            ;;
        --syslog-tag=?*)
            syslog_tag=${1#*=}
            ;;
        --syslog-tag=)
            error_on_required_arg --syslog-tag
            ;;
        -i|--user)
            if [[ -n $2 ]]
            then
                user="$2"
                shift
            else
                error_on_required_arg --user
            fi
            ;;
        --user=?*)
            user=${1#*=}
            ;;
        --user=)
            error_on_required_arg --user
            ;;
        -i|--identity-file)
            if [[ -n $2 ]]
            then
                pem="$2"
                shift
            else
                error_on_required_arg --identity-file
            fi
            ;;
        --identity-file=?*)
            pem=${1#*=}
            ;;
        --identity-file=)
            error_on_required_arg --identity-file
            ;;
        -f|--out-file)
            if [[ -n $2 ]]
            then
                out_file="$2"
                shift
            else
                error_on_required_arg --out-file
            fi
            ;;
        --out-file=?*)
            out_file=${1#*=}
            ;;
        --out-file=)
            error_on_required_arg --out-file
            ;;
        -r|--latest-run)
            latest_run=true
            ;;
        -?*)
            printf 'WARN: Unknown option (ignored): %s\n' "$1" >&2
            ;;
        *)
            break
    esac
    shift
done
[[ $# -lt 2 ]] && error_on_usage
which jq &>/dev/null || error_on_missing_dependency jq
# Constants
process_name=/tmp/process-name
app_log=/tmp/slog.log
# Positional args
app_name=$1
environment=$2
# Use defaults if options were not set
: ${syslog_tag:=$(basename $app_name)}
: ${user:=$(whoami)}
: ${pem:="$HOME/.ssh/id_rsa"}
: ${out_file:=${app_log}}
: ${latest_run:=false}
# Figure out which mesosslave is running the app
mesosslave=$(curl -X GET https://marathon.fc-${environment}.us/v2/apps/${app_name}/ | jq --raw-output '.app.tasks[0].host')
host="${user}@${mesosslave}"
proxy_cmd="ProxyCommand=ssh -W %h:%p -i $pem ${user}@bastion.fc-${environment}.us"
[[ $mesosslave = null ]] && error_on_not_on_marathon "$app_name"
if $latest_run
then
    # Find the process name for the most recent run of the app, and write it to a
    # file so we can get the logs for only that run.
    # TBH I'm not sure if this is really working anymore
    printf '> Finding process name\n'
    ssh -t -o "$proxy_cmd" $host "sudo cat /var/log/messages | fgrep 'docker/${syslog_tag}' | awk '{ print \$5 }' | tail -1 > $process_name && cat $process_name"
    printf '> Filtering log\n'
    ssh -t -o "$proxy_cmd" $host "sudo cat /var/log/messages | fgrep \$(cat $process_name) | sed 's/^\(.\{15\}\).*docker\\/${syslog_tag}[^:]*: /\1: /' > $app_log && rm $process_name"
else
    printf '> Filtering log\n'
    ssh -t -o "$proxy_cmd" $host "sudo cat /var/log/messages | fgrep 'docker/${syslog_tag}' | sed 's/^\(.\{15\}\).*docker\\/${syslog_tag}[^:]*: /\1: /' > $app_log"
fi
# Copy over the logs
scp -o "$proxy_cmd" $host:$app_log "$out_file"
ssh -o "$proxy_cmd" $host "rm $app_log"
